<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yuhengua2077.github.io/</id><title>Yuheng Shi</title><subtitle>Config by Chirpy</subtitle> <updated>2025-04-13T19:37:03-05:00</updated> <author> <name>Yuheng Shi</name> <uri>https://yuhengua2077.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://yuhengua2077.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://yuhengua2077.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Yuheng Shi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>链表归纳（更新中）</title><link href="https://yuhengua2077.github.io/posts/Linked-List/" rel="alternate" type="text/html" title="链表归纳（更新中）" /><published>2022-05-27T18:38:00-05:00</published> <updated>2022-06-22T14:45:32-05:00</updated> <id>https://yuhengua2077.github.io/posts/Linked-List/</id> <content src="https://yuhengua2077.github.io/posts/Linked-List/" /> <author> <name>Yuheng Shi</name> </author> <category term="学习笔记" /> <summary> 链表类型 单向链表 双向链表 循环链表 1. 单向链表 单向链表的每个节点由val和next两部分组成，分别代表了该节点储存的值以及指向下一个节点的指针。 链表的开始节点（入口节点）被称为head。 class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next 特点 只有指向下一个节点的指针，只能单向移动查询 便于理解，只需要考虑一个指针走向 2. 双向链表 双向链表的每个节点由val，prev和next三部分组成，分别代表了该节点储存的值，指向前一个节点的指针以及指向下一个节点的指针。 class ListNode: def __init__(self, val): ... </summary> </entry> <entry><title>双指针、滑动窗口归纳（更新中）</title><link href="https://yuhengua2077.github.io/posts/Two-Pointers/" rel="alternate" type="text/html" title="双指针、滑动窗口归纳（更新中）" /><published>2022-05-20T01:37:00-05:00</published> <updated>2022-06-21T20:29:34-05:00</updated> <id>https://yuhengua2077.github.io/posts/Two-Pointers/</id> <content src="https://yuhengua2077.github.io/posts/Two-Pointers/" /> <author> <name>Yuheng Shi</name> </author> <category term="学习笔记" /> <summary> 形式 对撞指针 快慢指针 分离指针 1. 对撞指针 对撞指针是指left, right两个指针，分别指向数组第一个和最后一个元素。在loop里面满足条件时，left指针递增或者是right指针递减，直到两个指针指向同一个元素或者是满足题目的条件结束循环。 left, right = 0, len(nums) - 1 while left &amp;lt; right: if condition1: return something elif condition2: left += 1 else: right -= 1 return something_else 应用 有序数组查找类问题：二分查找，两数之和等等 字符串反转类问题：回文字符串等等 2. 快慢指针 快慢指针是指slow, fast两个指针，分别指向数组第一个和第二个元... </summary> </entry> <entry><title>二分查找 Binary Search（更新中）</title><link href="https://yuhengua2077.github.io/posts/Binary-Search/" rel="alternate" type="text/html" title="二分查找 Binary Search（更新中）" /><published>2022-05-14T19:00:00-05:00</published> <updated>2022-05-22T19:09:18-05:00</updated> <id>https://yuhengua2077.github.io/posts/Binary-Search/</id> <content src="https://yuhengua2077.github.io/posts/Binary-Search/" /> <author> <name>Yuheng Shi</name> </author> <category term="学习笔记" /> <summary> 前提条件 数组一定为有序数组！sorted array 数组不包含重复元素 unique/distinct values/elements 步骤 target为目标数字, nums为数组名称 一般使用左闭右闭区间，即[left, right] define left = 0, right = len(nums) - 1 取中心节点mid位置，一般为mid = (left + right) // 2，或者在Java或者C++用left + (right - left) / 2防止int overflow 如果nums[mid]大于target，说明target存在于左区间，右节点right需等于mid - 1，在区间[left, mid - 1]里继续搜索 否则如果nums[mid]小于target，说明target存在于右区间，左节点lef... </summary> </entry> <entry><title>Python排序算法总结（更新中）</title><link href="https://yuhengua2077.github.io/posts/Python1/" rel="alternate" type="text/html" title="Python排序算法总结（更新中）" /><published>2022-05-14T18:09:00-05:00</published> <updated>2022-05-22T19:08:59-05:00</updated> <id>https://yuhengua2077.github.io/posts/Python1/</id> <content src="https://yuhengua2077.github.io/posts/Python1/" /> <author> <name>Yuheng Shi</name> </author> <category term="学习笔记" /> <summary> 1. 冒泡排序 Bobble Sort 思路 第i (i = 1, 2, 3, ...) 趟遍历的时候，从数列中前n - i + 1个元素的第1个开始，相邻两个元素进行比较，如果前一个比后一个大，则交换两个元素位置，否则不变。 步骤 首先把第1个元素和第2个元素对比，如果满足条件则交换位置，然后比较第2个元素和第3个元素，以此类推，直到完成第n - 1个元素和第n个元素的比较。 第一步的结果导致整个数组中最大的元素处在数组第n个的位置上。 然后对前n - 1个元素执行同样操作，导致前n - 1个元素中最大的元素处在数组第n - 1的位置上。 然后对前n - 2个元素执行同样操作，直到某一次遍历没有任何交换操作发生为止结束排序。 复杂度和使用场景 Best case: ascending order array, 只需要经过n - 1次比较即可完成... </summary> </entry> </feed>
